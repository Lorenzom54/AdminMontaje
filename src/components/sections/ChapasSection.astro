---
import PageHeader from '../PageHeader.astro';
import Modal from '../Modal.astro';
import ChapasForm from '../forms/ChapasForm.astro';
import DetailModal from '../DetailModal.astro';
import TableChapa from '../table/TableChapa.astro';
import ChapaDetail from '../detail/ChapaDetail.astro';
import { fetchChapas } from '../../lib/chapa_api';

const chapas = await fetchChapas();

// Calcular estadísticas dinámicas
const totalChapas = chapas.length;
const tiposUnicos = [...new Set(chapas.map(c => c.tipo_acero).filter(Boolean))].length;
const chapasPorTipo = chapas.reduce((acc, chapa) => {
  if (chapa.tipo_acero) {
    acc[chapa.tipo_acero] = (acc[chapa.tipo_acero] || 0) + 1;
  }
  return acc;
}, {});
---

<PageHeader 
  title="Chapas y Perfiles" 
  subtitle="Gestión de materiales base: chapas y perfiles metálicos"
  actionButton={{ text: "Nueva Chapa", onClick: "openModal('modal-nueva-chapa')" }}
/>

<div class="chapas-section">
  <div class="stats-grid">
    <div class="stat-card">
      <div class="stat-icon stock">
        <svg width="24" height="24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" />
        </svg>
      </div>
      <div class="stat-content">
        <div class="stat-number">{totalChapas}</div>
        <div class="stat-label">Total Chapas</div>
      </div>
    </div>
    
    <div class="stat-card">
      <div class="stat-icon types">
        <svg width="24" height="24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
        </svg>
      </div>
      <div class="stat-content">
        <div class="stat-number">{tiposUnicos}</div>
        <div class="stat-label">Tipos de Acero</div>
      </div>
    </div>
    
    <div class="stat-card">
      <div class="stat-icon s275">
        <svg width="24" height="24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
        </svg>
      </div>
      <div class="stat-content">
        <div class="stat-number">{chapasPorTipo['S275JR'] || 0}</div>
        <div class="stat-label">S275JR</div>
      </div>
    </div>
    
    <div class="stat-card">
      <div class="stat-icon s355">
        <svg width="24" height="24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
        </svg>
      </div>
      <div class="stat-content">
        <div class="stat-number">{chapasPorTipo['S355JR'] || 0}</div>
        <div class="stat-label">S355JR</div>
      </div>
    </div>
  </div>

  <div class="chapas-table">
    <div class="table-header">
      <h3>Inventario de Chapas</h3>
      <div class="table-filters">
        <select class="filter-select" id="tipo-filter">
          <option value="">Todos los tipos</option>
          <option value="S235">S235</option>
          <option value="S275">S275</option>
          <option value="S355">S355</option>
          <option value="S460">S460</option>
          <option value="S690">S690</option>
        </select>
        <input 
          type="text" 
          class="filter-input" 
          id="search-input"
          placeholder="Buscar por código o colada..."
        />
        <button class="btn-import" onclick="openModal('modal-import-csv-chapas')">
          <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
          </svg>
          Importar CSV
        </button>
      </div>
    </div>
    
    <TableChapa chapas={chapas} />
  </div>
</div>

<!-- Modal para Nueva Chapa -->
<Modal id="modal-nueva-chapa" title="Nueva Chapa" size="lg">
  <ChapasForm />
</Modal>

<!-- Modal para Importar CSV -->
<Modal id="modal-import-csv-chapas" title="Importar Chapa desde CSV" size="lg">
  <div class="import-csv-form">
    <div class="csv-instructions">
      <h4>Formato del archivo CSV</h4>
      <p>El archivo debe contener:</p>
      <ul>
        <li><strong>Primera fila:</strong> Código de la chapa (ej: 2025-211-5)</li>
        <li><strong>Dimensiones:</strong> En formato "12.000,00 x 2.500,00 x 20,00 mm"</li>
        <li><strong>Calidad:</strong> Tipo de acero y espesor (ej: S275JR 20,00 mm)</li>
        <li><strong>Lista de piezas:</strong> Con columnas "Pieza" y "Cantidad"</li>
      </ul>
      <p><strong>Nota:</strong> El sistema creará la chapa y asociará las piezas existentes automáticamente.</p>
    </div>
    
    <div class="csv-upload">
      <input type="file" id="csv-file-chapas" accept=".csv" />
      <div class="upload-area" id="upload-area-chapas">
        <svg width="48" height="48" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
        </svg>
        <p>Arrastra tu archivo CSV aquí o haz clic para seleccionar</p>
      </div>
    </div>
    
    <div class="csv-preview" id="csv-preview-chapas" style="display: none;">
      <h4>Vista previa del archivo</h4>
      <div class="preview-content" id="preview-content-chapas"></div>
    </div>
    
    <div class="form-actions">
      <button type="button" class="btn-cancel" data-close-modal="modal-import-csv-chapas">
        Cancelar
      </button>
      <button type="button" class="btn-submit" id="import-btn-chapas" disabled>
        <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
        </svg>
        Importar Chapa
      </button>
    </div>
  </div>
</Modal>

<!-- Modales de Detalles dinámicos -->
{chapas.map((chapa) => (
  <DetailModal id={`detail-chapa-${chapa.id}`} title={`Chapa #${chapa.codigo}`} type="chapa">
    <ChapaDetail chapa={chapa} />
  </DetailModal>
))}

<style>
  .chapas-section {
    space-y: 32px;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 24px;
    margin-bottom: 32px;
  }

  .stat-card {
    background: white;
    padding: 24px;
    border-radius: 12px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    border: 1px solid #e5e7eb;
    display: flex;
    align-items: center;
    gap: 16px;
  }

  .stat-icon {
    width: 48px;
    height: 48px;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
  }

  .stat-icon.stock { background: linear-gradient(135deg, #3b82f6, #1d4ed8); }
  .stat-icon.types { background: linear-gradient(135deg, #8b5cf6, #7c3aed); }
  .stat-icon.s275 { background: linear-gradient(135deg, #10b981, #059669); }
  .stat-icon.s355 { background: linear-gradient(135deg, #f59e0b, #d97706); }

  .stat-content {
    flex: 1;
  }

  .stat-number {
    font-size: 24px;
    font-weight: 700;
    color: #111827;
    line-height: 1;
    margin-bottom: 4px;
  }

  .stat-label {
    font-size: 14px;
    color: #6b7280;
    font-weight: 500;
  }

  .chapas-table {
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    border: 1px solid #e5e7eb;
  }

  .table-header {
    padding: 24px;
    border-bottom: 1px solid #e5e7eb;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 16px;
  }

  .table-header h3 {
    font-size: 18px;
    font-weight: 600;
    color: #111827;
    margin: 0;
  }

  .table-filters {
    display: flex;
    gap: 12px;
  }

  .filter-select, .filter-input {
    padding: 8px 12px;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    font-size: 14px;
    background: white;
    color: #374151;
  }

  .filter-input {
    min-width: 200px;
  }

  .btn-import {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 16px;
    background: #10b981;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .btn-import:hover {
    background: #059669;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
  }

  /* Estilos para el modal de importación CSV */
  .import-csv-form {
    max-width: none;
  }

  .csv-instructions {
    background: #f0f9ff;
    border: 1px solid #0ea5e9;
    border-radius: 8px;
    padding: 16px;
    margin-bottom: 24px;
  }

  .csv-instructions h4 {
    color: #0c4a6e;
    margin-bottom: 8px;
  }

  .csv-instructions ul {
    margin: 8px 0 0 20px;
  }

  .csv-upload {
    margin-bottom: 24px;
  }

  #csv-file-chapas {
    display: none;
  }

  .upload-area {
    border: 2px dashed #d1d5db;
    border-radius: 8px;
    padding: 48px 24px;
    text-align: center;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .upload-area:hover {
    border-color: #3b82f6;
    background: #f8fafc;
  }

  .upload-area.dragover {
    border-color: #3b82f6;
    background: #eff6ff;
  }

  .upload-area svg {
    margin: 0 auto 16px;
    color: #6b7280;
  }

  .csv-preview {
    margin-bottom: 24px;
  }

  .preview-content {
    max-height: 300px;
    overflow: auto;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    padding: 16px;
    background: #f9fafb;
  }

  .preview-section {
    margin-bottom: 16px;
    padding: 12px;
    background: white;
    border-radius: 6px;
    border: 1px solid #e5e7eb;
  }

  .preview-section h5 {
    font-size: 14px;
    font-weight: 600;
    color: #374151;
    margin-bottom: 8px;
  }

  .preview-section p {
    font-size: 12px;
    color: #6b7280;
    margin: 4px 0;
  }

  .pieces-list {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 8px;
    margin-top: 8px;
  }

  .piece-item {
    background: #f3f4f6;
    padding: 8px;
    border-radius: 4px;
    font-size: 11px;
    color: #374151;
  }

  .form-actions {
    display: flex;
    gap: 12px;
    justify-content: flex-end;
    padding-top: 20px;
    border-top: 1px solid #e5e7eb;
  }

  .btn-cancel {
    padding: 10px 20px;
    border: 1px solid #d1d5db;
    background: white;
    color: #374151;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .btn-cancel:hover {
    background: #f9fafb;
    border-color: #9ca3af;
  }

  .btn-submit {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 10px 20px;
    background: #3b82f6;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .btn-submit:hover {
    background: #2563eb;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }

  @media (max-width: 768px) {
    .stats-grid {
      grid-template-columns: 1fr;
    }

    .table-header {
      flex-direction: column;
      align-items: stretch;
      gap: 12px;
    }

    .table-filters {
      flex-direction: column;
    }
  }
</style>

<script type="module">
  // Filtros en tiempo real
  document.addEventListener('DOMContentLoaded', function() {
    const tipoFilter = document.getElementById('tipo-filter');
    const searchInput = document.getElementById('search-input');
    const tableRows = document.querySelectorAll('.data-table tbody tr');

    function filterTable() {
      const tipoValue = tipoFilter.value.toLowerCase();
      const searchValue = searchInput.value.toLowerCase();

      tableRows.forEach(row => {
        const tipo = row.querySelector('.tipo-badge').textContent.toLowerCase();
        const codigo = row.cells[0].textContent.toLowerCase();
        const colada = row.cells[4].textContent.toLowerCase();

        const matchesTipo = !tipoValue || tipo.includes(tipoValue);
        const matchesSearch = !searchValue || 
          codigo.includes(searchValue) || 
          colada.includes(searchValue);

        if (matchesTipo && matchesSearch) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    }

    tipoFilter.addEventListener('change', filterTable);
    searchInput.addEventListener('input', filterTable);
  });

  // Funcionalidad de importación CSV para chapas
  document.addEventListener('DOMContentLoaded', function() {
    const csvFileChapas = document.getElementById('csv-file-chapas');
    const uploadAreaChapas = document.getElementById('upload-area-chapas');
    const csvPreviewChapas = document.getElementById('csv-preview-chapas');
    const previewContentChapas = document.getElementById('preview-content-chapas');
    const importBtnChapas = document.getElementById('import-btn-chapas');
    let parsedChapaData = null;

    // Click en área de upload
    uploadAreaChapas.addEventListener('click', () => csvFileChapas.click());

    // Drag and drop
    uploadAreaChapas.addEventListener('dragover', (e) => {
      e.preventDefault();
      uploadAreaChapas.classList.add('dragover');
    });

    uploadAreaChapas.addEventListener('dragleave', () => {
      uploadAreaChapas.classList.remove('dragover');
    });

    uploadAreaChapas.addEventListener('drop', (e) => {
      e.preventDefault();
      uploadAreaChapas.classList.remove('dragover');
      const files = e.dataTransfer.files;
      if (files.length > 0) {
        handleFileChapas(files[0]);
      }
    });

    // Selección de archivo
    csvFileChapas.addEventListener('change', (e) => {
      if (e.target.files.length > 0) {
        handleFileChapas(e.target.files[0]);
      }
    });

    function handleFileChapas(file) {
      if (!file.name.endsWith('.csv')) {
        alert('Por favor selecciona un archivo CSV válido');
        return;
      }

      const reader = new FileReader();
      reader.onload = (e) => {
        const csv = e.target.result;
        parseCSVChapas(csv);
      };
      reader.readAsText(file);
    }

    function parseCSVChapas(csv) {
      try {
        const lines = csv.split('\n').filter(line => line.trim());
        if (lines.length < 10) {
          alert('El archivo CSV no tiene el formato esperado');
          return;
        }

        // Extraer código de la chapa (primera fila)
        const firstLine = lines[0].split(';');
        const chapaCodigo = firstLine.find(cell => {
          const trimmed = cell?.trim();
          return trimmed && 
                 trimmed.length > 0 && 
                 !trimmed.includes('001') && 
                 /^\d{4}-\d{3}-\d+$/.test(trimmed);
        })?.trim();
        
        if (!chapaCodigo) {
          alert('No se pudo encontrar el código de la chapa en la primera fila');
          return;
        }

        // Buscar dimensiones
        let dimensiones = null;
        let tipoAcero = null;
        let espesor = null;

        for (const line of lines) {
          // Buscar dimensiones (línea que contiene "Dimensiones" y formato con "x" y "mm")
          if (line.includes('Dimensiones') && line.includes(' x ') && line.includes(' mm')) {
            const dimensionMatch = line.match(/(\d{1,2}\.\d{3},\d{2}\s*x\s*\d{1,2}\.\d{3},\d{2}\s*x\s*\d{1,2},\d{2}\s*mm)/);
            if (dimensionMatch) {
              dimensiones = dimensionMatch[1];
            }
          }
          
          // Buscar calidad (línea que contiene tipo de acero y espesor)
          if (line.includes('Calidad') && /S\d{3}/.test(line)) {
            const calidadMatch = line.match(/(S\d{3}[A-Z]*)\s+(\d{1,2},\d{2})\s*mm/);
            if (calidadMatch) {
              tipoAcero = calidadMatch[1];
              espesor = calidadMatch[2];
            }
          }
        }

        // Buscar lista de piezas con mejor lógica
        const piezas = [];
        let headerRowIndex = -1;
        let cantidadColumnIndex = -1;
        let piezaColumnIndex = -1;
        
        // Encontrar la fila de encabezados de la lista de piezas
        for (let i = 0; i < lines.length; i++) {
          const line = lines[i];
          if (line.includes('Lista de piezas') && line.includes('Cantidad') && line.includes('Pieza')) {
            headerRowIndex = i;
            const headerCells = line.split(';');
            
            // Encontrar los índices de las columnas importantes
            for (let j = 0; j < headerCells.length; j++) {
              const cell = headerCells[j]?.trim().toLowerCase();
              if (cell === 'cantidad') {
                cantidadColumnIndex = j;
              } else if (cell === 'pieza') {
                piezaColumnIndex = j;
              }
            }
            break;
          }
        }
        
        if (headerRowIndex === -1 || cantidadColumnIndex === -1 || piezaColumnIndex === -1) {
          alert('No se pudo encontrar la estructura de la lista de piezas en el CSV');
          return;
        }
        
        // Procesar las filas de datos después del encabezado
        for (let i = headerRowIndex + 1; i < lines.length; i++) {
          const line = lines[i];
          
          // Parar si llegamos al final del archivo
          if (line.includes('ago.') || line.trim() === '') {
            break;
          }
          
          const cells = line.split(';');
          
          // Extraer cantidad y código de pieza usando los índices encontrados
          const cantidadValue = cells[cantidadColumnIndex]?.trim();
          const piezaValue = cells[piezaColumnIndex]?.trim();
          
          // Validar que tenemos datos válidos
          if (cantidadValue && /^\d+$/.test(cantidadValue) && 
              piezaValue && /^P\d+$/.test(piezaValue)) {
            piezas.push({
              codigo: piezaValue,
              cantidad: parseInt(cantidadValue)
            });
          }
        }
        
        console.log('Piezas extraídas:', piezas); // Para debug
        
        if (piezas.length === 0) {
          alert('No se encontraron piezas válidas en el archivo CSV. Verifique que el formato sea correcto.');
          return;
        }

        parsedChapaData = {
          chapa: {
            codigo: parseInt(chapaCodigo.replace(/[^\d]/g, '')), // Extraer solo números
            dimensiones: dimensiones,
            tipo_acero: tipoAcero,
            espesor: espesor,
            colada: null
          },
          piezas: piezas
        };
        
        console.log('Datos parseados:', parsedChapaData); // Para debug

        showPreviewChapas(parsedChapaData);
        importBtnChapas.disabled = false;

      } catch (error) {
        console.error('Error al parsear CSV:', error);
        alert('Error al procesar el archivo CSV: ' + error.message);
      }
    }

    function showPreviewChapas(data) {
      let html = '<div class="preview-section">';
      html += '<h5>Información de la Chapa</h5>';
      html += `<p><strong>Código:</strong> ${data.chapa.codigo}</p>`;
      if (data.chapa.dimensiones) html += `<p><strong>Dimensiones:</strong> ${data.chapa.dimensiones}</p>`;
      if (data.chapa.tipo_acero) html += `<p><strong>Tipo de Acero:</strong> ${data.chapa.tipo_acero}</p>`;
      if (data.chapa.espesor) html += `<p><strong>Espesor:</strong> ${data.chapa.espesor}</p>`;
      html += '</div>';

      html += '<div class="preview-section">';
      html += '<h5>Piezas a Asociar</h5>';
      html += `<p>Total de tipos de piezas: ${data.piezas.length}</p>`;
      html += '<div class="pieces-list">';
      data.piezas.forEach(pieza => {
        html += `<div class="piece-item">${pieza.codigo} (${pieza.cantidad} unidades)</div>`;
      });
      html += '</div></div>';

      previewContentChapas.innerHTML = html;
      csvPreviewChapas.style.display = 'block';
    }

    // Importar CSV
    importBtnChapas.addEventListener('click', async () => {
      if (!parsedChapaData) return;

      importBtnChapas.disabled = true;
      const originalText = importBtnChapas.innerHTML;
      importBtnChapas.innerHTML = `
        <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="animate-spin">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
        </svg>
        Importando...
      `;

      try {
        const response = await fetch('/api/chapas/import-csv', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(parsedChapaData)
        });

        const result = await response.json();

        if (result.success) {
          importBtnChapas.innerHTML = `
            <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
            ¡Importado!
          `;
          importBtnChapas.style.background = '#10b981';
          
          alert(result.message);
          
          setTimeout(() => {
            location.reload();
          }, 1500);
        } else {
          throw new Error(result.error || 'Error al importar CSV');
        }
      } catch (error) {
        console.error('Error al importar CSV:', error);
        alert('Error al importar CSV: ' + error.message);
        
        importBtnChapas.innerHTML = originalText;
        importBtnChapas.disabled = false;
      }
    });
  });
</script>