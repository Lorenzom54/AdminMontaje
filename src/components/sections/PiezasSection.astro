---
import PageHeader from '../PageHeader.astro';
import Modal from '../Modal.astro';
import FormField from '../forms/FormField.astro';
import PiezasForm from '../forms/PiezasForm.astro';
import DetailModal from '../DetailModal.astro';
import TablePieza from '../table/TablePieza.astro';
import PiezaDetail from '../detail/PiezaDetail.astro';
import Pagination from '../Pagination.astro';
import { fetchPiezas, fetchPiezasCount, FASES, searchPiezas, searchPiezasCount } from '../../lib/pieza_api';
import { fetchObrasForSelect } from '../../lib/conjunto_api';

// Obtener parámetros de paginación de la URL
const url = new URL(Astro.request.url);
const currentPage = parseInt(url.searchParams.get('page') || '1');
const pageSize = parseInt(url.searchParams.get('pageSize') || '20');

// Obtener filtros de la URL
const filters = {
  fase: url.searchParams.get('fase'),
  obra_id: url.searchParams.get('obra_id'),
  search: url.searchParams.get('search')
};

// Aplicar filtros si existen
let piezas, totalPiezas;
if (filters.fase || filters.obra_id || filters.search) {
  const searchFilters = {};
  if (filters.fase) searchFilters.fase = filters.fase;
  if (filters.obra_id) searchFilters.obra_id = filters.obra_id;
  if (filters.search) {
    searchFilters.codigo = filters.search;
    searchFilters.colada = filters.search;
  }
  
  piezas = await searchPiezas(searchFilters, currentPage, pageSize);
  totalPiezas = await searchPiezasCount(searchFilters);
} else {
  piezas = await fetchPiezas(currentPage, pageSize);
  totalPiezas = await fetchPiezasCount();
}

const obras = await fetchObrasForSelect();

// Mapear obras al formato esperado por FormField
const obraOptions = obras.map(obra => ({
  value: obra.id.toString(),
  label: obra.nombre
}));

// Calcular estadísticas dinámicas (usar total real, no solo la página actual)
const piezasPorFase = piezas.reduce((acc, pieza) => {
  const fase = FASES[pieza.fase] || 'Desconocida';
  acc[fase] = (acc[fase] || 0) + 1;
  return acc;
}, {});

// Calcular datos de paginación
const totalPages = Math.ceil(totalPiezas / pageSize);
const startItem = totalPiezas > 0 ? (currentPage - 1) * pageSize + 1 : 0;
const endItem = Math.min(currentPage * pageSize, totalPiezas);
---

<PageHeader 
  title="Gestión de Piezas" 
  subtitle="Control de inventario y seguimiento de piezas individuales"
  actionButton={{ text: "Nueva Pieza", onClick: "openModal('modal-nueva-pieza')" }}
/>

<!-- Barra de filtro de proyecto persistente -->
<div class="project-filter-bar">
  <div class="filter-container">
    <div class="filter-label">
      <svg width="20" height="20" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
      </svg>
      <span>Proyecto Activo:</span>
    </div>
    <select class="project-filter-select" id="active-project-filter">
      <option value="">Todos los proyectos</option>
      {obras.map(obra => (
        <option value={obra.id.toString()} selected={filters.obra_id === obra.id.toString()}>{obra.nombre}</option>
      ))}
    </select>
    <div class="filter-info">
      <span class="text-sm text-gray-500">Esta selección se mantendrá activa en futuras visitas</span>
    </div>
  </div>
</div>

<div class="piezas-section">
  <div class="stats-grid">
    <div class="stat-card">
      <div class="stat-icon inventory">
        <svg width="24" height="24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
        </svg>
      </div>
      <div class="stat-content">
        <div class="stat-number">{totalPiezas}</div>
        <div class="stat-label">Total Piezas</div>
      </div>
    </div>
    
    <div class="stat-card">
      <div class="stat-icon fabrication">
        <svg width="24" height="24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4" />
        </svg>
      </div>
      <div class="stat-content">
        <div class="stat-number">{piezasPorFase['Corte'] || 0}</div>
        <div class="stat-label">En Corte</div>
      </div>
    </div>
    
    <div class="stat-card">
      <div class="stat-icon ready">
        <svg width="24" height="24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      </div>
      <div class="stat-content">
        <div class="stat-number">{piezasPorFase['Soldadura'] || 0}</div>
        <div class="stat-label">En Soldadura</div>
      </div>
    </div>
    
    <div class="stat-card">
      <div class="stat-icon quality">
        <svg width="24" height="24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
        </svg>
      </div>
      <div class="stat-content">
        <div class="stat-number">{piezasPorFase['Montaje'] || 0}</div>
        <div class="stat-label">En Montaje</div>
      </div>
    </div>
  </div>

  <div class="piezas-table">
    <div class="table-header">
      <h3>Piezas Registradas</h3>
      <div class="table-filters">
        <select class="filter-select" id="fase-filter">
          <option value="">Todas las fases</option>
          <option value="0" selected={filters.fase === '0'}>Corte</option>
          <option value="1" selected={filters.fase === '1'}>Biselado</option>
          <option value="2" selected={filters.fase === '2'}>Montaje</option>
          <option value="3" selected={filters.fase === '3'}>Soldadura</option>
        </select>
        <input 
          type="text" 
          class="filter-input" 
          id="search-input"
          placeholder="Buscar por código o colada..."
          value={filters.search || ''}
        />
        <button class="btn-import" onclick="openModal('modal-import-csv')">
          <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
          </svg>
          Importar CSV
        </button>
      </div>
    </div>
    
    <TablePieza piezas={piezas} />
    
    <!-- Paginación -->
    <Pagination 
      currentPage={currentPage}
      totalPages={totalPages}
      totalItems={totalPiezas}
      pageSize={pageSize}
      startItem={startItem}
      endItem={endItem}
    />
  </div>
</div>

<!-- Modal para Nueva Pieza -->
<Modal id="modal-nueva-pieza" title="Nueva Pieza" size="lg">
  <PiezasForm />
</Modal>

<!-- Modal para Importar CSV -->
<Modal id="modal-import-csv" title="Importar Piezas desde CSV" size="lg">
  <div class="import-csv-form">
    <div class="obra-selection">
      <FormField 
        label="Obra de Destino" 
        name="obra_id" 
        type="select"
        options={obraOptions}
        required={true}
      />
    </div>
    
    <div class="csv-instructions">
      <h4>Formato del archivo CSV</h4>
      <p>El archivo debe contener las siguientes columnas:</p>
      <ul>
        <li><strong>Conjunto</strong> - Código del conjunto (se creará si no existe)</li>
        <li><strong>Parte</strong> - Código único de la pieza</li>
        <li><strong>Apodo</strong> - Campo adicional (opcional)</li>
        <li><strong>Perfil</strong> - Tipo de material/perfil</li>
        <li><strong>Longitud(mm)</strong> - Longitud en milímetros</li>
        <li><strong>Peso</strong> - Peso de la pieza</li>
      </ul>
      <p><strong>Nota:</strong> El archivo debe usar punto y coma (;) como separador.</p>
    </div>
    
    <div class="csv-upload">
      <input type="file" id="csv-file" accept=".csv" />
      <div class="upload-area" id="upload-area">
        <svg width="48" height="48" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
        </svg>
        <p>Arrastra tu archivo CSV aquí o haz clic para seleccionar</p>
      </div>
    </div>
    
    <div class="csv-preview" id="csv-preview" style="display: none;">
      <h4>Vista previa del archivo</h4>
      <div class="preview-table" id="preview-table"></div>
    </div>
    
    <div class="form-actions">
      <button type="button" class="btn-cancel" data-close-modal="modal-import-csv">
        Cancelar
      </button>
      <button type="button" class="btn-submit" id="import-btn" disabled>
        <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
        </svg>
        Importar Piezas
      </button>
    </div>
  </div>
</Modal>

<!-- Modales de Detalles dinámicos -->
{piezas.map((pieza) => (
  <DetailModal id={`detail-pieza-${pieza.id}`} title={`Pieza ${pieza.codigo}`} type="pieza">
    <PiezaDetail pieza={pieza} />
  </DetailModal>
))}

<style>
  .piezas-section {
    space-y: 32px;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 24px;
    margin-bottom: 32px;
  }

  .stat-card {
    background: white;
    padding: 24px;
    border-radius: 12px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    border: 1px solid #e5e7eb;
    display: flex;
    align-items: center;
    gap: 16px;
  }

  .stat-icon {
    width: 48px;
    height: 48px;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
  }

  .stat-icon.inventory { background: linear-gradient(135deg, #3b82f6, #1d4ed8); }
  .stat-icon.fabrication { background: linear-gradient(135deg, #f59e0b, #d97706); }
  .stat-icon.ready { background: linear-gradient(135deg, #10b981, #059669); }
  .stat-icon.quality { background: linear-gradient(135deg, #8b5cf6, #7c3aed); }

  .stat-content {
    flex: 1;
  }

  .stat-number {
    font-size: 24px;
    font-weight: 700;
    color: #111827;
    line-height: 1;
    margin-bottom: 4px;
  }

  .stat-label {
    font-size: 14px;
    color: #6b7280;
    font-weight: 500;
  }

  .piezas-table {
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    border: 1px solid #e5e7eb;
  }

  .table-header {
    padding: 24px;
    border-bottom: 1px solid #e5e7eb;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 16px;
  }

  .table-header h3 {
    font-size: 18px;
    font-weight: 600;
    color: #111827;
    margin: 0;
  }

  .table-filters {
    display: flex;
    gap: 12px;
    align-items: center;
  }

  .filter-select, .filter-input {
    padding: 8px 12px;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    font-size: 14px;
    background: white;
    color: #374151;
  }

  .filter-input {
    min-width: 200px;
  }

  .btn-import {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 16px;
    background: #10b981;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .btn-import:hover {
    background: #059669;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
  }

  /* Estilos para la barra de filtro de proyecto */
  .project-filter-bar {
    background: linear-gradient(135deg, #3b82f6, #1d4ed8);
    border-radius: 12px;
    padding: 20px 24px;
    margin-bottom: 32px;
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.2);
  }

  .filter-container {
    display: flex;
    align-items: center;
    gap: 16px;
    flex-wrap: wrap;
  }

  .filter-label {
    display: flex;
    align-items: center;
    gap: 8px;
    color: white;
    font-weight: 600;
    font-size: 16px;
  }

  .project-filter-select {
    min-width: 250px;
    padding: 10px 16px;
    border: 2px solid rgba(255, 255, 255, 0.2);
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    background: rgba(255, 255, 255, 0.95);
    color: #374151;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .project-filter-select:focus {
    outline: none;
    border-color: rgba(255, 255, 255, 0.8);
    background: white;
    box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.2);
  }

  .project-filter-select:hover {
    background: white;
    border-color: rgba(255, 255, 255, 0.6);
  }

  .filter-info {
    margin-left: auto;
  }

  .filter-info span {
    color: rgba(255, 255, 255, 0.8);
    font-size: 13px;
    font-style: italic;
  }

  /* Estilos para el modal de importación CSV */
  .import-csv-form {
    max-width: none;
  }

  .obra-selection {
    background: #f0f9ff;
    border: 1px solid #0ea5e9;
    border-radius: 8px;
    padding: 16px;
    margin-bottom: 24px;
  }

  .csv-instructions {
    background: #f0f9ff;
    border: 1px solid #0ea5e9;
    border-radius: 8px;
    padding: 16px;
    margin-bottom: 24px;
  }

  .csv-instructions h4 {
    color: #0c4a6e;
    margin-bottom: 8px;
  }

  .csv-instructions ul {
    margin: 8px 0 0 20px;
  }

  .csv-upload {
    margin-bottom: 24px;
  }

  #csv-file {
    display: none;
  }

  .upload-area {
    border: 2px dashed #d1d5db;
    border-radius: 8px;
    padding: 48px 24px;
    text-align: center;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .upload-area:hover {
    border-color: #3b82f6;
    background: #f8fafc;
  }

  .upload-area.dragover {
    border-color: #3b82f6;
    background: #eff6ff;
  }

  .upload-area svg {
    margin: 0 auto 16px;
    color: #6b7280;
  }

  .csv-preview {
    margin-bottom: 24px;
  }

  .preview-table {
    max-height: 300px;
    overflow: auto;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
  }

  .form-actions {
    display: flex;
    gap: 12px;
    justify-content: flex-end;
    padding-top: 20px;
    border-top: 1px solid #e5e7eb;
  }

  .btn-cancel {
    padding: 10px 20px;
    border: 1px solid #d1d5db;
    background: white;
    color: #374151;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .btn-cancel:hover {
    background: #f9fafb;
    border-color: #9ca3af;
  }

  .btn-submit {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 10px 20px;
    background: #3b82f6;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .btn-submit:hover {
    background: #2563eb;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
  }

  .preview-data-table {
    width: 100%;
    border-collapse: collapse;
    font-size: 12px;
  }

  .preview-data-table th,
  .preview-data-table td {
    padding: 8px;
    border: 1px solid #e5e7eb;
    text-align: left;
  }

  .preview-data-table th {
    background: #f9fafb;
    font-weight: 600;
    color: #6b7280;
    text-transform: uppercase;
    font-size: 11px;
  }

  .preview-data-table td {
    color: #6b7280;
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }

  .status-badge.ready {
    background: #d1fae5;
    color: #065f46;
  }

  .status-badge.quality {
    background: #ede9fe;
    color: #6b21a8;
  }

  .action-buttons {
    display: flex;
    gap: 8px;
  }

  .btn-icon {
    width: 32px;
    height: 32px;
    border: none;
    background: #f3f4f6;
    color: #6b7280;
    border-radius: 6px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .btn-icon:hover {
    background: #e5e7eb;
    color: #374151;
  }

  @media (max-width: 768px) {
    .stats-grid {
      grid-template-columns: 1fr;
    }

    .table-header {
      flex-direction: column;
      align-items: stretch;
      gap: 12px;
    }

    .table-filters {
      flex-direction: column;
    }

    .data-table {
      font-size: 14px;
    }

    .data-table th,
    .data-table td {
      padding: 12px 8px;
    }
  }
</style>

<script type="module">
  // Filtros en tiempo real
  document.addEventListener('DOMContentLoaded', function() {
    const faseFilter = document.getElementById('fase-filter');
    const obraFilter = document.getElementById('obra-filter');
    const searchInput = document.getElementById('search-input');
    
    // Estado de paginación
    let currentPage = parseInt(new URLSearchParams(window.location.search).get('page') || '1');
    let currentPageSize = parseInt(new URLSearchParams(window.location.search).get('pageSize') || '20');
    let currentFilters = {
      fase: new URLSearchParams(window.location.search).get('fase') || '',
      obra_id: new URLSearchParams(window.location.search).get('obra_id') || '',
      search: new URLSearchParams(window.location.search).get('search') || ''
    };
    
    // Aplicar filtros iniciales
    if (currentFilters.fase) faseFilter.value = currentFilters.fase;
    if (currentFilters.search) searchInput.value = currentFilters.search;

    // Manejar filtro de proyecto persistente
    const activeProjectFilter = document.getElementById('active-project-filter');
    
    // Restaurar proyecto activo desde localStorage o URL
    const savedProjectId = localStorage.getItem('activeProjectId');
    const urlProjectId = currentFilters.obra_id;
    
    if (urlProjectId) {
      // Si hay proyecto en URL, usarlo y guardarlo
      activeProjectFilter.value = urlProjectId;
      localStorage.setItem('activeProjectId', urlProjectId);
      currentFilters.obra_id = urlProjectId;
    } else if (savedProjectId) {
      // Si no hay en URL pero sí en localStorage, aplicarlo
      activeProjectFilter.value = savedProjectId;
      currentFilters.obra_id = savedProjectId;
    }

    function updateURL() {
      const params = new URLSearchParams();
      params.set('page', currentPage.toString());
      params.set('pageSize', currentPageSize.toString());
      
      if (currentFilters.fase) params.set('fase', currentFilters.fase);
      if (currentFilters.obra_id) params.set('obra_id', currentFilters.obra_id);
      if (currentFilters.search) params.set('search', currentFilters.search);
      
      const newURL = `${window.location.pathname}?${params.toString()}`;
      window.history.pushState({}, '', newURL);
      
      // Recargar la página para aplicar los cambios
      window.location.reload();
    }

    function applyFilters() {
      currentFilters.fase = faseFilter.value;
      currentFilters.search = searchInput.value;
      currentPage = 1; // Resetear a la primera página cuando se aplican filtros
      updateURL();
    }

    // Event listeners para filtros
    faseFilter.addEventListener('change', applyFilters);
    
    // Event listener para filtro de proyecto persistente
    activeProjectFilter.addEventListener('change', function() {
      const selectedProjectId = this.value;
      
      // Guardar en localStorage
      if (selectedProjectId) {
        localStorage.setItem('activeProjectId', selectedProjectId);
      } else {
        localStorage.removeItem('activeProjectId');
      }
      
      // Actualizar filtros y recargar
      currentFilters.obra_id = selectedProjectId;
      currentPage = 1;
      updateURL();
    });
    
    // Debounce para el input de búsqueda
    let searchTimeout;
    searchInput.addEventListener('input', () => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(applyFilters, 500);
    });
    
    // Event listeners para paginación
    document.addEventListener('click', function(e) {
      if (e.target.matches('[data-page]') || e.target.closest('[data-page]')) {
        e.preventDefault();
        const button = e.target.matches('[data-page]') ? e.target : e.target.closest('[data-page]');
        const page = parseInt(button.getAttribute('data-page'));
        
        if (page && page !== currentPage && !button.disabled) {
          currentPage = page;
          updateURL();
        }
      }
    });
    
    // Event listener para cambio de tamaño de página
    const pageSizeSelect = document.getElementById('page-size-select');
    if (pageSizeSelect) {
      pageSizeSelect.addEventListener('change', function() {
        currentPageSize = parseInt(this.value);
        currentPage = 1; // Resetear a la primera página
        updateURL();
      });
    }

    // Funcionalidad de importación CSV
    const csvFile = document.getElementById('csv-file');
    const uploadArea = document.getElementById('upload-area');
    const csvPreview = document.getElementById('csv-preview');
    const previewTable = document.getElementById('preview-table');
    const importBtn = document.getElementById('import-btn');
    let csvData = null;

    // Click en área de upload
    uploadArea.addEventListener('click', () => csvFile.click());

    // Drag and drop
    uploadArea.addEventListener('dragover', (e) => {
      e.preventDefault();
      uploadArea.classList.add('dragover');
    });

    uploadArea.addEventListener('dragleave', () => {
      uploadArea.classList.remove('dragover');
    });

    uploadArea.addEventListener('drop', (e) => {
      e.preventDefault();
      uploadArea.classList.remove('dragover');
      const files = e.dataTransfer.files;
      if (files.length > 0) {
        handleFile(files[0]);
      }
    });

    // Selección de archivo
    csvFile.addEventListener('change', (e) => {
      if (e.target.files.length > 0) {
        handleFile(e.target.files[0]);
      }
    });

    function handleFile(file) {
      if (!file.name.endsWith('.csv')) {
        alert('Por favor selecciona un archivo CSV válido');
        return;
      }

      const reader = new FileReader();
      reader.onload = (e) => {
        const csv = e.target.result;
        parseCSV(csv);
      };
      reader.readAsText(file);
    }

    function parseCSV(csv) {
      const lines = csv.split('\n').filter(line => line.trim());
      if (lines.length < 2) {
        alert('El archivo CSV debe tener al menos una fila de encabezados y una fila de datos');
        return;
      }

      const headers = lines[0].split(';').map(h => h.trim());
      const rows = lines.slice(1).map(line => {
        const values = line.split(';').map(v => v.trim());
        const row = {};
        headers.forEach((header, index) => {
          row[header] = values[index] || '';
        });
        return row;
      });

      csvData = rows;
      showPreview(headers, rows);
      importBtn.disabled = false;
    }

    function showPreview(headers, rows) {
      let html = '<table class="preview-data-table"><thead><tr>';
      headers.forEach(header => {
        html += `<th>${header}</th>`;
      });
      html += '</tr></thead><tbody>';

      rows.slice(0, 5).forEach(row => {
        html += '<tr>';
        headers.forEach(header => {
          html += `<td>${row[header] || '-'}</td>`;
        });
        html += '</tr>';
      });

      if (rows.length > 5) {
        html += `<tr><td colspan="${headers.length}" style="text-align: center; font-style: italic;">... y ${rows.length - 5} filas más</td></tr>`;
      }

      html += '</tbody></table>';
      previewTable.innerHTML = html;
      csvPreview.style.display = 'block';
    }

    // Importar CSV
    importBtn.addEventListener('click', async () => {
      if (!csvData) return;

      const obraSelect = document.querySelector('[name="obra_id"]');
      const selectedObraId = obraSelect.value;
      
      if (!selectedObraId) {
        alert('Por favor selecciona una obra de destino');
        return;
      }
      importBtn.disabled = true;
      const originalText = importBtn.innerHTML;
      importBtn.innerHTML = `
        <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="animate-spin">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
        </svg>
        Importando...
      `;

      try {
        const response = await fetch('/api/piezas/import-csv', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ 
            csvData: csvData,
            selectedObraId: selectedObraId 
          })
        });

        const result = await response.json();

        if (result.success) {
          // Guardar la obra seleccionada en localStorage
          localStorage.setItem('lastSelectedObra', selectedObraId);
          
          importBtn.innerHTML = `
            <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
            ¡Importado!
          `;
          importBtn.style.background = '#10b981';
          
          alert(result.message);
          
          setTimeout(() => {
            location.reload();
          }, 1500);
        } else {
          throw new Error(result.error || 'Error al importar CSV');
        }
      } catch (error) {
        console.error('Error al importar CSV:', error);
        alert('Error al importar CSV: ' + error.message);
        
        importBtn.innerHTML = originalText;
        importBtn.disabled = false;
      }
    });
    
    // Restaurar la última obra seleccionada
    const lastSelectedObra = localStorage.getItem('lastSelectedObra');
    if (lastSelectedObra) {
      const obraSelect = document.querySelector('[name="obra_id"]');
      if (obraSelect) {
        obraSelect.value = lastSelectedObra;
      }
    }
  });
</script>