---
import FormField from './FormField.astro';
import { fetchConjuntosForSelect, fetchChapasForSelect, fetchFasePiezasForSelect } from '../../lib/pieza_api';

// Obtener datos para los selects
const conjuntos = await fetchConjuntosForSelect();
const chapas = await fetchChapasForSelect();
const fases = await fetchFasePiezasForSelect();

const tipoMaterialOptions = [
  { value: 'chapas y perfiles', label: 'Chapas y Perfiles' }
];

const faseOptions = fases?.map((f, i) => ({ value: i.toString(), label: f.fase })) || [];
const conjuntoOptions = conjuntos?.map(c => ({ value: c.id.toString(), label: c.codigo })) || [];
const chapaOptions = chapas?.map(c => ({ value: c.id.toString(), label: `#${c.codigo}` })) || [];
---

<form class="piezas-form" id="piezas-form" data-default-fases={JSON.stringify(faseOptions)}>
  <div class="form-grid">
    <div class="form-column">
      <FormField 
        label="Código de la Pieza" 
        name="codigo" 
        required={true}
        placeholder="Ej: PZ-001"
      />
      
      <FormField 
        label="Tipo de Material" 
        name="tipo_material" 
      />
      
      <FormField 
        label="Colada" 
        name="colada" 
        placeholder="Ej: COL2024001"
      />
    </div>
    
    <div class="form-column">
      <FormField 
        label="Fase" 
        name="fase_id" 
        type="select"
        options={faseOptions}
        required={true}
        id="fase-select"
      />
      
      <FormField 
        label="Conjunto" 
        name="conjunto_id" 
        type="select"
        options={conjuntoOptions}
        id="conjunto-select"
      />
      
      <FormField 
        label="Chapa" 
        name="chapa_id" 
        type="select"
        options={chapaOptions}
      />
    </div>
  </div>
  
  <div class="form-actions">
    <button type="button" class="btn-cancel" data-close-modal="modal-nueva-pieza">
      Cancelar
    </button>
    <button type="submit" class="btn-submit">
      <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
      </svg>
      Crear Pieza
    </button>
  </div>
</form>

<style>
  .piezas-form {
    max-width: none;
  }

  .form-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 24px;
    margin-bottom: 20px;
  }

  .form-column {
    display: flex;
    flex-direction: column;
  }

  .form-actions {
    display: flex;
    gap: 12px;
    justify-content: flex-end;
    padding-top: 20px;
    border-top: 1px solid #e5e7eb;
  }

  .btn-cancel {
    padding: 10px 20px;
    border: 1px solid #d1d5db;
    background: white;
    color: #374151;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .btn-cancel:hover {
    background: #f9fafb;
    border-color: #9ca3af;
  }

  .btn-submit {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 10px 20px;
    background: #3b82f6;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .btn-submit:hover {
    background: #2563eb;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
  }

  @media (max-width: 768px) {
    .form-grid {
      grid-template-columns: 1fr;
      gap: 0;
    }

    .form-actions {
      flex-direction: column;
    }
  }
</style>

<script type="module">
  // Fases por defecto (fallback)
  const form = document.getElementById('piezas-form');
  const defaultFases = JSON.parse(form.getAttribute('data-default-fases') || '[]');

     // Función para cargar fases dinámicamente basadas en el conjunto seleccionado
     async function loadFasesByConjunto(conjuntoId) {
       const faseSelect = document.getElementById('fase-select');

       if (!conjuntoId) {
         updateFaseSelect(defaultFases);
         return;
       }

       try {
         const response = await fetch(`/api/conjuntos/${conjuntoId}/fases-piezas`);
         const result = await response.json();

         if (result.success && result.data && result.data.length > 0) {
           // Usar las fases del conjunto
           const fasesOptions = result.data.map((fase, index) => ({
             value: index.toString(),
             label: fase
           }));
           updateFaseSelect(fasesOptions);
         } else {
           // Fallback a fases por defecto
           updateFaseSelect(defaultFases);
         }
       } catch (error) {
         console.error('Error al cargar fases del conjunto:', error);
         // Fallback a fases por defecto
         updateFaseSelect(defaultFases);
       }
     }

     // Función para actualizar las opciones del select de fases
     function updateFaseSelect(fasesOptions) {
       const faseSelect = document.getElementById('fase-select');
       if (!faseSelect) {
         console.error('No se encontró el elemento fase-select');
         return;
       }

       // Guardar el valor actual seleccionado
       const valorActual = faseSelect.value;

       // Limpiar opciones existentes
       faseSelect.innerHTML = '<option value="">Seleccionar...</option>';

       // Agregar nuevas opciones
       fasesOptions.forEach(option => {
         const optionElement = document.createElement('option');
         optionElement.value = option.value;
         optionElement.textContent = option.label;
         faseSelect.appendChild(optionElement);
       });

       // Restaurar el valor seleccionado si existe en las nuevas opciones
       if (valorActual && fasesOptions.some(opt => opt.value === valorActual)) {
         faseSelect.value = valorActual;
       }
     }

  // Event listener para el cambio de conjunto
  document.addEventListener('DOMContentLoaded', function() {
    const conjuntoSelect = document.getElementById('conjunto-select');

    if (conjuntoSelect) {
      // Cargar fases para el conjunto ya seleccionado (si existe)
      const conjuntoIdActual = conjuntoSelect.value;
      if (conjuntoIdActual) {
        loadFasesByConjunto(conjuntoIdActual);
      }

      // Event listener para cambios futuros
      conjuntoSelect.addEventListener('change', function() {
        const conjuntoId = this.value;
        loadFasesByConjunto(conjuntoId);
      });
    }
  });

  document.getElementById('piezas-form').addEventListener('submit', async (e) => {
    e.preventDefault();

    const form = e.target;
    const formData = new FormData(form);
    const submitButton = form.querySelector('.btn-submit');
    
    // Prevenir múltiples envíos
    if (submitButton.disabled) {
      return;
    }
    
    // Deshabilitar botón durante el envío
    submitButton.disabled = true;
    const originalText = submitButton.innerHTML;
    submitButton.innerHTML = `
      <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="animate-spin">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
      </svg>
      Creando...
    `;

    const body = {
      codigo: formData.get('codigo'),
      tipo_material: formData.get('tipo_material'),
      colada: formData.get('colada'),
      fase_id: formData.get('fase_id'),
      conjunto_id: formData.get('conjunto_id'),
      chapa_id: formData.get('chapa_id'),
    };

    try {
      const res = await fetch('/api/piezas/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(body)
      });

      const json = await res.json();
      
      if (json.success) {
        // Mostrar éxito
        submitButton.innerHTML = `
          <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
          </svg>
          ¡Pieza creada!
        `;
        submitButton.style.background = '#10b981';
        
        // Recargar la página después de un breve delay
        setTimeout(() => {
          location.reload();
        }, 1500);
      } else {
        throw new Error(json.error || 'Error al crear la pieza');
      }
    } catch (error) {
      console.error('Error al crear pieza:', error);
      
      // Mostrar error
      submitButton.innerHTML = `
        <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
        Error al crear
      `;
      submitButton.style.background = '#ef4444';
      
      // Restaurar botón después de un delay
      setTimeout(() => {
        submitButton.innerHTML = originalText;
        submitButton.style.background = '';
        submitButton.disabled = false;
      }, 2000);
    }
  });
</script>