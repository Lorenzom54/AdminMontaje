---
interface Props {
  piezas: Array<{
    id: number;
    codigo: string;
    tipo_material: string;
    colada: string;
    fase: number;
    conjunto_id: number;
    chapa_id: number;
    created_at: string;
    conjuntos?: { codigo: string; obras?: { nombre: string } };
    chapas?: { codigo: number };
  }>;
}

const { piezas } = Astro.props;

// Función para formatear fechas
function formatDate(dateString: string) {
  if (!dateString) return '-';
  return new Date(dateString).toLocaleDateString('es-ES');
}
---

<div class="table-container">
  <div id="piezas-table"></div>
</div>

<style>
  .table-container {
    padding: 20px;
    min-height: 500px;
    display: flex;
    flex-direction: column;
  }

  /* Personalización de Tabulator */
  :global(.tabulator) {
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  :global(.tabulator-header) {
    background: linear-gradient(135deg, #f8fafc, #f1f5f9);
    border-bottom: 2px solid #e2e8f0;
  }

  :global(.tabulator-col) {
    background: transparent !important;
    border-right: 1px solid #e2e8f0;
    color: #374151;
    font-weight: 600;
    font-size: 14px;
    padding: 12px 16px;
  }

  :global(.tabulator-row) {
    border-bottom: 1px solid #f1f5f9;
    transition: all 0.2s ease;
  }

  :global(.tabulator-row:hover) {
    background: #f8fafc !important;
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  :global(.tabulator-cell) {
    padding: 12px 16px;
    border-right: 1px solid #f1f5f9;
    color: #111827;
    font-size: 14px;
  }

  :global(.tabulator-row.tabulator-row-even) {
    background: #fafafa;
  }

  :global(.tabulator-row.tabulator-row-odd) {
    background: white;
  }

  :global(.tabulator-footer) {
    background: #f8fafc;
    border-top: 1px solid #e2e8f0;
    padding: 12px 16px;
    position: sticky;
    bottom: 0;
    z-index: 10;
  }

  :global(.tabulator-paginator) {
    background: transparent;
    border: none;
    color: #6b7280;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    flex-wrap: wrap;
  }

  :global(.tabulator-page) {
    background: white;
    border: 1px solid #d1d5db;
    color: #374151;
    padding: 8px 12px;
    margin: 0 2px;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  :global(.tabulator-page:hover) {
    background: #f3f4f6;
    border-color: #9ca3af;
  }

  :global(.tabulator-page.tabulator-page-active) {
    background: #3b82f6;
    color: white;
    border-color: #3b82f6;
  }

  :global(.tabulator-page.tabulator-page-disabled) {
    background: #f3f4f6;
    color: #9ca3af;
    cursor: not-allowed;
  }

  /* Mejorar visibilidad del contador de paginación */
  :global(.tabulator-paginator .tabulator-page-size) {
    margin: 0 10px;
    font-weight: 500;
  }

  :global(.tabulator-paginator .tabulator-page-counter) {
    margin: 0 10px;
    font-weight: 500;
    color: #374151;
  }

  #piezas-table {
    flex: 1;
    min-height: 400px;
  }

  /* Estilos para badges y elementos especiales */
  .pieza-info {
    display: flex;
    flex-direction: column;
    gap: 4px;
  }

  .pieza-info strong {
    font-weight: 600;
    color: #111827;
  }

  .pieza-id {
    font-size: 12px;
    color: #6b7280;
  }

  .material-badge {
    display: inline-block;
    padding: 4px 8px;
    background: #f3f4f6;
    color: #374151;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 500;
  }

  .fase-badge {
    display: inline-block;
    padding: 4px 8px;
    background: #dbeafe;
    color: #1e40af;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 500;
  }

  .action-buttons {
    display: flex;
    gap: 8px;
  }

  .btn-icon {
    width: 32px;
    height: 32px;
    border: 1px solid #d1d5db;
    background: white;
    color: #374151;
    border-radius: 6px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .btn-icon:hover {
    background: #f3f4f6;
    border-color: #9ca3af;
  }

  .btn-icon.btn-delete {
    color: #dc2626;
    border-color: #fecaca;
  }

  .btn-icon.btn-delete:hover {
    background: #fef2f2;
    border-color: #f87171;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .action-buttons {
      flex-direction: column;
    }
    
    :global(.tabulator) {
      font-size: 12px;
    }
    
    :global(.tabulator-cell) {
      padding: 8px 12px;
    }
  }
</style>

<script type="module">
  // Función para formatear fechas
  function formatDate(dateString) {
    if (!dateString) return '-';
    return new Date(dateString).toLocaleDateString('es-ES');
  }

  // Función para obtener el nombre de la fase
  function getFaseName(fase) {
    if (fase === 0) return 'Para cortar';
    if (fase === 1) return 'Cortado';
    if (fase === 2) return 'Chaflanado';
    if (fase === 3) return 'Repasado';
    return `Fase ${fase}`;
  }

  // Función para editar pieza
  window.editPieza = async function(piezaId) {
    try {
      const response = await fetch(`/api/piezas/${piezaId}`);
      const result = await response.json();
      
      if (result.success) {
        const pieza = result.data;
        
        // Llenar el formulario con los datos existentes
        const form = document.getElementById('piezas-form');
        if (form) {
          form.querySelector('[name="codigo"]').value = pieza.codigo || '';
          form.querySelector('[name="tipo_material"]').value = pieza.tipo_material || '';
          form.querySelector('[name="colada"]').value = pieza.colada || '';
          form.querySelector('[name="fase_id"]').value = pieza.fase?.toString() || '';
          form.querySelector('[name="conjunto_id"]').value = pieza.conjunto_id?.toString() || '';
          form.querySelector('[name="chapa_id"]').value = pieza.chapa_id?.toString() || '';
          
          // Cambiar el comportamiento del formulario para actualizar
          form.setAttribute('data-edit-id', piezaId);
          form.querySelector('.btn-submit').innerHTML = `
            <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
            Actualizar Pieza
          `;
          
          // Cambiar el título del modal
          const modal = document.getElementById('modal-nueva-pieza');
          const title = modal.querySelector('.modal-title');
          if (title) {
            title.textContent = 'Editar Pieza';
          }
          
          // Abrir el modal
          openModal('modal-nueva-pieza');
        }
      }
    } catch (error) {
      console.error('Error al cargar pieza para editar:', error);
      alert('Error al cargar los datos de la pieza');
    }
  };

  // Función para eliminar pieza
  window.deletePieza = async function(piezaId, piezaCodigo) {
    if (confirm(`¿Estás seguro de que quieres eliminar la pieza "${piezaCodigo}"? Esta acción no se puede deshacer.`)) {
      try {
        const response = await fetch(`/api/piezas/${piezaId}`, {
          method: 'DELETE'
        });
        
        const result = await response.json();
        
        if (result.success) {
          alert('Pieza eliminada correctamente');
          location.reload();
        } else {
          throw new Error(result.error || 'Error al eliminar la pieza');
        }
      } catch (error) {
        console.error('Error al eliminar pieza:', error);
        alert('Error al eliminar la pieza: ' + error.message);
      }
    }
  };

  // Inicializar Tabulator cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', function() {
    // Esperar a que Tabulator esté disponible
    if (typeof Tabulator === 'undefined') {
      console.error('Tabulator no está disponible');
      return;
    }

    // Preparar los datos para Tabulator
    const tableData = window.piezasData || [];
    
    // Configuración de Tabulator
    const table = new Tabulator('#piezas-table', {
      data: tableData,
      layout: 'fitDataFill',
      pagination: true,
      paginationSize: 20,
      paginationSizeSelector: [10, 20, 50, 100],
      paginationButtonCount: 5,
      paginationCounter: 'rows',
      movableColumns: true,
      resizableRows: true,
      selectable: true,
      sortable: true,
      filterable: true,
      height: 'calc(100vh - 200px)',
      minHeight: '400px',
      locale: 'es',
      langs: {
        es: {
          'pagination': {
            'first': 'Primera',
            'first_title': 'Primera página',
            'last': 'Última',
            'last_title': 'Última página',
            'prev': 'Anterior',
            'prev_title': 'Página anterior',
            'next': 'Siguiente',
            'next_title': 'Página siguiente',
            'all': 'Todas',
            'counter': {
              'showing': 'Mostrando',
              'of': 'de',
              'rows': 'filas',
              'pages': 'páginas'
            }
          }
        }
      },
      columns: [
        {
          title: 'Código',
          field: 'codigo',
          headerFilter: 'input',
          headerFilterPlaceholder: 'Buscar código...',
          formatter: function(cell) {
            const pieza = cell.getRow().getData();
            return `
              <div class="pieza-info">
                <strong>${pieza.codigo}</strong>
                <span class="pieza-id">ID: ${pieza.id}</span>
              </div>
            `;
          },
          sorter: 'string',
          width: 150
        },
        {
          title: 'Tipo Material',
          field: 'tipo_material',
          headerFilter: 'input',
          headerFilterPlaceholder: 'Buscar material...',
          formatter: function(cell) {
            const material = cell.getValue() || '-';
            return `<span class="material-badge">${material}</span>`;
          },
          sorter: 'string',
          width: 140
        },
        {
          title: 'Fase',
          field: 'fase',
          headerFilter: 'select',
          headerFilterOptions: [
            { label: 'Todas', value: '' },
            { label: 'Para cortar', value: '0' },
            { label: 'Cortado', value: '1' },
            { label: 'Chaflanado', value: '2' },
            { label: 'Repasado', value: '3' }
          ],
          formatter: function(cell) {
            const fase = cell.getValue();
            const faseName = getFaseName(fase);
            return `<span class="fase-badge">${faseName}</span>`;
          },
          sorter: 'number',
          width: 120
        },
        {
          title: 'Conjunto',
          field: 'conjuntos.codigo',
          headerFilter: 'input',
          headerFilterPlaceholder: 'Buscar conjunto...',
          formatter: function(cell) {
            const conjunto = cell.getValue() || '-';
            return `<div class="conjunto-info"><span>${conjunto}</span></div>`;
          },
          sorter: 'string',
          width: 120
        },
        {
          title: 'Obra',
          field: 'conjuntos.obras.nombre',
          headerFilter: 'input',
          headerFilterPlaceholder: 'Buscar obra...',
          formatter: function(cell) {
            const obra = cell.getValue() || '-';
            return `<div class="obra-info"><span>${obra}</span></div>`;
          },
          sorter: 'string',
          width: 150
        },
        {
          title: 'Chapa',
          field: 'chapas.codigo',
          headerFilter: 'input',
          headerFilterPlaceholder: 'Buscar chapa...',
          formatter: function(cell) {
            const chapa = cell.getValue();
            const chapaDisplay = chapa ? `#${chapa}` : '-';
            return `<div class="chapa-info"><span>${chapaDisplay}</span></div>`;
          },
          sorter: 'number',
          width: 100
        },
        {
          title: 'Colada',
          field: 'colada',
          headerFilter: 'input',
          headerFilterPlaceholder: 'Buscar colada...',
          formatter: function(cell) {
            const colada = cell.getValue() || '-';
            return `<div class="colada-info"><span>${colada}</span></div>`;
          },
          sorter: 'string',
          width: 120
        },
        {
          title: 'Fecha Creación',
          field: 'created_at',
          headerFilter: 'input',
          headerFilterPlaceholder: 'Buscar fecha...',
          formatter: function(cell) {
            const date = cell.getValue();
            return formatDate(date);
          },
          sorter: 'datetime',
          width: 130
        },
        {
          title: 'Acciones',
          field: 'id',
          headerSort: false,
          formatter: function(cell) {
            const pieza = cell.getRow().getData();
            return `
              <div class="action-buttons">
                <button class="btn-icon" title="Ver detalles" onclick="openModal('detail-pieza-${pieza.id}')">
                  <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                  </svg>
                </button>
                <button class="btn-icon" title="Editar" onclick="editPieza('${pieza.id}')">
                  <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                  </svg>
                </button>
                <button class="btn-icon btn-delete" title="Eliminar" onclick="deletePieza('${pieza.id}', '${pieza.codigo}')">
                  <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                  </svg>
                </button>
              </div>
            `;
          },
          width: 120
        }
      ],
      rowFormatter: function(row) {
        // Agregar clases CSS personalizadas
        const data = row.getData();
        if (data.fase === 0) {
          row.getElement().classList.add('fase-pendiente');
        } else if (data.fase === 1) {
          row.getElement().classList.add('fase-completada');
        }
      }
    });

    // Hacer la tabla disponible globalmente para debugging
    window.piezasTable = table;

    // Eventos de la tabla
    table.on('tableBuilt', function() {
      console.log('Tabla de piezas construida con éxito');
    });

    table.on('dataLoaded', function(data) {
      console.log(`Datos cargados: ${data.length} piezas`);
    });

    table.on('rowClick', function(e, row) {
      // Opcional: hacer las filas clickeables
      console.log('Fila clickeada:', row.getData());
    });

    // Exportar datos
    window.exportTableData = function(format = 'csv') {
      if (format === 'csv') {
        table.download('csv', 'piezas.csv');
      } else if (format === 'xlsx') {
        table.download('xlsx', 'piezas.xlsx');
      } else if (format === 'pdf') {
        table.download('pdf', 'piezas.pdf');
      }
    };
  });

  // Modificar el comportamiento del formulario para manejar edición
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('piezas-form');
    if (form) {
      // Remover event listeners existentes para evitar duplicados
      const newForm = form.cloneNode(true);
      form.parentNode.replaceChild(newForm, form);
      
      newForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const editId = newForm.getAttribute('data-edit-id');
        const isEditing = !!editId;
        
        const formData = new FormData(newForm);
        const submitButton = newForm.querySelector('.btn-submit');
        
        // Prevenir múltiples envíos
        if (submitButton.disabled) {
          return;
        }
        
        // Deshabilitar botón durante el envío
        submitButton.disabled = true;
        const originalText = submitButton.innerHTML;
        submitButton.innerHTML = `
          <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="animate-spin">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
          </svg>
          ${isEditing ? 'Actualizando...' : 'Creando...'}
        `;

        const body = {
          codigo: formData.get('codigo'),
          tipo_material: formData.get('tipo_material'),
          colada: formData.get('colada'),
          fase_id: formData.get('fase_id'),
          conjunto_id: formData.get('conjunto_id'),
          chapa_id: formData.get('chapa_id'),
        };

        try {
          const url = isEditing ? `/api/piezas/${editId}` : '/api/piezas/create';
          const method = isEditing ? 'PUT' : 'POST';
          
          const res = await fetch(url, {
            method: method,
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(body)
          });

          const json = await res.json();
          
          if (json.success) {
            // Mostrar éxito
            submitButton.innerHTML = `
              <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
              </svg>
              ${isEditing ? '¡Pieza actualizada!' : '¡Pieza creada!'}
            `;
            submitButton.style.background = '#10b981';
            
            // Recargar la página después de un breve delay
            setTimeout(() => {
              location.reload();
            }, 1500);
          } else {
            throw new Error(json.error || `Error al ${isEditing ? 'actualizar' : 'crear'} la pieza`);
          }
        } catch (error) {
          console.error(`Error al ${isEditing ? 'actualizar' : 'crear'} pieza:`, error);
          
          // Mostrar error
          submitButton.innerHTML = `
            <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
            Error al ${isEditing ? 'actualizar' : 'crear'}
          `;
          submitButton.style.background = '#ef4444';
          
          // Restaurar botón después de un delay
          setTimeout(() => {
            submitButton.innerHTML = originalText;
            submitButton.style.background = '';
            submitButton.disabled = false;
          }, 2000);
        }
      });
    }

    // Limpiar formulario cuando se cierra el modal
    document.addEventListener('click', function(e) {
      if (e.target.matches('[data-close-modal="modal-nueva-pieza"]')) {
        const form = document.getElementById('piezas-form');
        if (form) {
          form.reset();
          form.removeAttribute('data-edit-id');
          form.querySelector('.btn-submit').innerHTML = `
            <svg width="16" height="16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
            Crear Pieza
          `;
          
          // Restaurar título del modal
          const modal = document.getElementById('modal-nueva-pieza');
          const title = modal.querySelector('.modal-title');
          if (title) {
            title.textContent = 'Nueva Pieza';
          }
        }
      }
    });
  });
</script>